note
	description: "Summary description for {TEST_INT_JSO}."
	author: ""
	date: "$Date$"
	revision: "$Revision$"

class
	TEST_INT_JSO
inherit
	ES_TEST
create
	make
feature {NONE}
	make
		do
			one := "1"
			zero := "0"
			create max64.make_from_integer (9223372036854775807)
			create min64.make_from_integer (-9223372036854775808)
			max64p := "9223372036854775808"
			min64m := "-9223372036854775809"
			add_boolean_case (agent t0)
			add_boolean_case (agent t1)
			add_boolean_case (agent t2)
			-- long tests
--			add_boolean_case (agent t50)
			-- very long, integer division needs to be fixeds
--			add_boolean_case (agent t51)s
		end

feature
	one, zero: BIG_INTEGER

	max64, min64: BIG_INTEGER
	max64p, min64m: BIG_INTEGER

	Max_value: INTEGER_64 = 9223372036854775807
	Min_value: INTEGER_64 = -9223372036854775808

	t0: BOOLEAN
		local
			imin, imax: INTEGER_64
			iminm, imaxp: BIG_INTEGER
		do
			comment("t0: int64 rolls over, but not big int")
			imax := Max_value  + 1
			Result := imax = -9223372036854775808
			check Result end
			imin := Min_value  - 1
			Result := imin = 9223372036854775807
			check Result end
			---
			imaxp := max64 + one
			Result := imaxp ~ max64p
			check Result end
			iminm := min64 - one
			Result := iminm ~ min64m
			check Result end
		end

	t1: BOOLEAN
		local
			im1, i2, im2: BIG_INTEGER
		do
			comment("t1: basic tests")
			im1 := "-1"
			i2 := "2"
			im2 := "-2"
			Result := one + zero ~ one
			check Result end
			assert_equal ("fail", one, zero + one)
			assert_equal ("fail", i2 , one + one)
			assert_equal ("fail", im2, -one - one)
			assert_equal ("fail", one , one - zero)
			assert_equal ("fail", im1, zero - one)
			Result := im2 < im1 and im1 < zero and zero < one and one < i2
			check Result end
			assert_equal ("fail", zero, -zero)
			assert_equal ("fail", zero, -zero)
			assert_equal ("fail", zero, -zero)
		end



	t2: BOOLEAN
		local
			x,y,r: BIG_INTEGER
		do
			comment("t2: negative gcd")
			x :=  "135749"
			y := "163231"
			r := x.gcd (y)
			Result := r ~ "151"
			check Result end
			assert_equal ("fail", r, x.gcd (-y))
			assert_equal ("fail", r, (-x).gcd (-y))
		end

--		3584193928671008811333
--		1044816032227634692243

feature -- long tests
	t50: BOOLEAN
		local
			x,y,z,r: BIG_INTEGER
		do
			comment("t2: multiplication of two 1000 digit numbers")
			x := "2965568378353123276348061266345783080824888634173636635747635072202278707255784767454711192972916696146985661243932638766743001420951575314525858150705284819438425780293854776985371743037095791702583725125451137558376530251552620295919831538359317595569382601550696344356463908920658071820940271591653"
			y := "4672161668346256276894539982323613161323003926846417075720492380110430364172843882368741633254526841817867620859794648380999526377667612987783332414498121324964878519111977993241729555032137992303648692476480001375176483343253229604747667706893386237386341281432242488415592920241193919031810456388473"
			r := "13855614902201230205396713838124973760884289654978319485082311142137827087037382261509727150448924026549639848300664275669756587958950101823084182662557603396553772413981330555796120057474978516493072772846480426310778474402862373352861984654437177663375784351271636410526463740967799532494281045773213312922392960285344870223371612383545660065429213425366297503367089113221838868648495159175215200868167451571769566788069803967064303112282810810635542749317601737077412949436378000501858987877504536107186295566967358769555137998905769629206690746812167187647482242005373441714818280697457849792215869"
			z := x*y
			Result := z ~ r
		end

	t51: BOOLEAN
		local
			x,y,z,r: BIG_INTEGER
		do
			comment("t2: multiplication of two 1000 digit numbers")
			x := "2965568378353123276348061266345783080824888634173636635747635072202278707255784767454711192972916696146985661243932638766743001420951575314525858150705284819438425780293854776985371743037095791702583725125451137558376530251552620295919831538359317595569382601550696344356463908920658071820940271591653"
			y := "4672161668346256276894539982323613161323003926846417075720492380110430364172843882368741633254526841817867620859794648380999526377667612987783332414498121324964878519111977993241729555032137992303648692476480001375176483343253229604747667706893386237386341281432242488415592920241193919031810456388473"
			r := "13855614902201230205396713838124973760884289654978319485082311142137827087037382261509727150448924026549639848300664275669756587958950101823084182662557603396553772413981330555796120057474978516493072772846480426310778474402862373352861984654437177663375784351271636410526463740967799532494281045773213312922392960285344870223371612383545660065429213425366297503367089113221838868648495159175215200868167451571769566788069803967064303112282810810635542749317601737077412949436378000501858987877504536107186295566967358769555137998905769629206690746812167187647482242005373441714818280697457849792215869"
			z := r//y
			Result := z ~ y
		end
end
